version: "3.8"

services:

  rabbitmq:
    image: rabbitmq:3-management
    container_name: rabbitmq
    restart: always
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      RABBITMQ_DEFAULT_USER: admin
      RABBITMQ_DEFAULT_PASS: admin
    networks:
      - rabbitmq_network
    healthcheck:
      test: [ "CMD", "rabbitmqctl", "status" ]
      interval: 30s
      retries: 3
      start_period: 10s
      timeout: 10s


  auth_service:
    build: ./auth_service
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=${NODE_ENV}
      - DATABASE_URL=${MONGODB_URL_AUTH}/${AUTH_DB}
      - RABBITMQ_URL=${RABBITMQ_URL}
      - JWT_SECRET=${JWT_SECRET}
      - JWT_EXPIRES_IN=${JWT_EXPIRES_IN}
      - ADMIN_FRONTEND=${ADMIN_FRONTEND}
      - ADMIN_BACKEND=${ADMIN_BACKEND}
      - CUSTOMER_FRONTEND=${CUSTOMER_FRONTEND}
      - CUSTOMER_BACKEND=${CUSTOMER_BACKEND}
    depends_on:
      - mongodb_auth
      - rabbitmq
    networks:
      - rabbitmq_network

  admin_backend:
    build: ./admin_backend
    ports:
      - "3001:3001"
    environment:
      - NODE_ENV=${NODE_ENV}
      - DB_HOST=${DB_HOST}
      - DB_PORT=${DB_PORT}
      - DB_USER=${MYSQL_USER}
      - DB_PASSWORD=${MYSQL_PASSWORD}
      - DB_NAME=${MYSQL_DATABASE}
      - RABBITMQ_URL=${RABBITMQ_URL}
      - LOCAL_ENV=${LOCAL_ENV}
      - AUTH_URL=${AUTH_URL}
      - ADMIN_FRONTEND=${ADMIN_FRONTEND}
      - ADMIN_BACKEND_PORT=${ADMIN_BACKEND_PORT}
      - ADMIN_BACKEND=${ADMIN_BACKEND}
    depends_on:
      mysql:
        condition: service_healthy
    networks:
      - rabbitmq_network

  customer_backend:
    build: ./customer_backend
    ports:
      - "3002:3002"
    env_file:
      - ".env"
    environment:
      - NODE_ENV=${NODE_ENV}
      - DATABASE_URL=${MONGODB_URL_CUSTOMER}/${CUSTOMER_DB}
      - RABBITMQ_URL=${RABBITMQ_URL}
      - CUSTOMER_BACKEND_PORT=${CUSTOMER_BACKEND_PORT}
      - STRIPE_SECRET_KEY=${STRIPE_SECRET_KEY}
    depends_on:
      - mongodb
    networks:
      - rabbitmq_network

  customer_frontend:
    build:
      context: ./customer_frontend
      args:
        - VITE_BACKEND_API_URL=${VITE_BACKEND_API_URL}
        - VITE_AUTH_API_URL=${VITE_AUTH_APU}
        - VITE_STRIPE_PUBLIC_KEY=${STRIPE_PUBLIC_KEY}
    ports:
      - "8080:80"
    depends_on:
      - auth_service
      - customer_backend
      - rabbitmq
    environment:
      - RABBITMQ_URL=${RABBITMQ_URL}
      - CUSTOMER_FRONTEND=${CUSTOMER_FRONTEND}
      - VITE_BACKEND_API_URL=${VITE_BACKEND_API_URL}
      - VITE_AUTH_API_URL=${VITE_AUTH_APU}
      - VITE_STRIPE_PUBLIC_KEY=${STRIPE_PUBLIC_KEY}
    networks:
      - rabbitmq_network

  admin_frontend:
    build:
      context: ./admin_frontend
      args:
        - VITE_LOGIN_URL=${VITE_LOGIN_URL}
        - VITE_ADMIN_BACKEND_URL=${VITE_ADMIN_BACKEND_URL}
        - VITE_VALIDATE_TOKEN_URL=${VITE_VALIDATE_TOKEN_URL}
    ports:
        - "8081:81"
    depends_on:
      - auth_service
      - admin_backend
      - rabbitmq
    environment:
      - RABBITMQ_URL=${RABBITMQ_URL}
      - VITE_LOGIN_URL=${VITE_LOGIN_URL}
      - VITE_ADMIN_BACKEND_URL=${VITE_ADMIN_BACKEND_URL}
      - VITE_VALIDATE_TOKEN_URL=${VITE_VALIDATE_TOKEN_URL}
    networks:
      - rabbitmq_network

  mail_service:
    build: ./mail_service
    ports:
      - "3003:3003"
    depends_on:
      - rabbitmq
    environment:
      - RABBITMQ_URL=amqp://admin:admin@rabbitmq:5672
      - MAIL_HOST=${MAIL_HOST}
      - MAIL_USERNAME=${MAIL_USERNAME}
      - MAIL_PASSWORD=${MAIL_PASSWORD}
    networks:
      - rabbitmq_network

  admin_sync_service:
    build: ./admin_sync_service
    ports:
      - "3004:3004"
    depends_on:
      - mysql
      - mongodb
      - rabbitmq
    environment:
      - NODE_ENV=${NODE_ENV}
      - MYSQL_HOST=${DB_HOST}
      - MYSQL_PORT=${DB_PORT}
      - MYSQL_USER=${MYSQL_USER}
      - MYSQL_PASSWORD=${MYSQL_PASSWORD}
      - MYSQL_DATABASE=${MYSQL_DATABASE}
      - MONGODB_URL=${MONGODB_URL}/${CUSTOMER_DB}
      - RABBITMQ_URL=${RABBITMQ_URL}
    networks:
      - rabbitmq_network

  customer_sync_service:
    build: ./customer_sync_service
    ports: 
      - "3005:3005"
    depends_on:
      - mysql
      - mongodb
      - rabbitmq
    environment:
      - NODE_ENV=${NODE_ENV}
      - DATABASE_URL=${MONGODB_URL_CUSTOMER}/${CUSTOMER_DB}
      - RABBITMQ_URL=${RABBITMQ_URL}
    networks:
      - rabbitmq_network

  mysql:
    image: mysql:8.0
    ports:
      - "3307:3306"
    environment:
      - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}
      - MYSQL_DATABASE=${MYSQL_DATABASE}
      - MYSQL_USER=${MYSQL_USER}
      - MYSQL_PASSWORD=${MYSQL_PASSWORD}
    volumes:
      - mysql_data:/var/lib/mysql
    command: --default-authentication-plugin=mysql_native_password
    networks:
      - rabbitmq_network
    healthcheck:
      test:
        [
          "CMD",
          "mysqladmin",
          "ping",
          "-h",
          "localhost",
          "-u",
          "root",
          "-p${MYSQL_ROOT_PASSWORD}",
        ]
      interval: 5s
      timeout: 5s
      retries: 5

  mongodb:
    image: mongo:latest
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
    networks:
      - rabbitmq_network

  mongodb_auth:
    image: mongo:latest
    ports:
      - "27018:27017"
    volumes:
      - mongodb_auth_data:/data/db
    networks:
      - rabbitmq_network

volumes:
  mongodb_data:
  mongodb_auth_data:
  mysql_data:

networks:
  rabbitmq_network:
    driver: bridge