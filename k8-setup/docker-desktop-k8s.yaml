# Namespace
apiVersion: v1
kind: Namespace
metadata:
  name: microservices
---
# ConfigMap for environment variables (matching your .env file)
apiVersion: v1
kind: ConfigMap
metadata:
  name: app-config
  namespace: microservices
data:
  # Environment
  NODE_ENV: "development"

  # MongoDB
  MONGODB_URL_CUSTOMER: "mongodb://mongodb-service:27017"
  MONGODB_URL_AUTH: "mongodb://mongodb-auth-service:27017"
  AUTH_DB: "auth"
  CUSTOMER_DB: "customer"

  # MySQL
  MYSQL_DATABASE: "admin_db"
  DB_HOST: "mysql-service"
  DB_PORT: "3306"
  # Additional MySQL variables for compatibility
  MYSQL_HOST: "mysql-service"

  # RABBITMQ
  RABBITMQ_URL: "amqp://admin:admin@rabbitmq-service:5672"

  # ADMIN BACKEND
  ADMIN_BACKEND_PORT: "3001"
  LOCAL_ENV: "http://localhost:5173/"
  ADMIN_FRONTEND: "http://localhost:30081"
  AUTH_URL: "http://auth-service:3000"

  # ADMIN FRONTEND
  VITE_LOGIN_URL: "http://127.0.0.1:30000/api/auth/login"
  VITE_ADMIN_BACKEND_URL: "http://localhost:30001/api/admin"
  VITE_VALIDATE_TOKEN_URL: "http://127.0.0.1:30000/api/auth/me"

  # AUTH SERVICE
  AUTHSERVICE_BACKEND_PORT: "3000"
  ADMIN_BACKEND: "http://localhost:30001"
  CUSTOMER_FRONTEND: "http://localhost:30080"

  # CUSTOMER BACKEND
  CUSTOMER_BACKEND_PORT: "3002"
  CUSTOMER_BACKEND: "http://localhost:30002"
---
# Secret for sensitive data (matching your .env file)
apiVersion: v1
kind: Secret
metadata:
  name: app-secrets
  namespace: microservices
type: Opaque
stringData:
  # MySQL
  MYSQL_ROOT_PASSWORD: "rootpassword"
  MYSQL_USER: "admin"
  MYSQL_PASSWORD: "adminpassword"

  # MAIL
  MAIL_HOST: "smtp.gmail.com"
  MAIL_USERNAME: "mattiswulff@gmail.com"
  MAIL_PASSWORD: "hmrg teqk anqi kgiv"

  # JWT
  JWT_SECRET: "6b414ee5dda31072fb2452acb3e73c9acfda853932d277f5e80ea361990b6678"
  JWT_EXPIRES_IN: "30d"
---
# MySQL Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mysql
  namespace: microservices
spec:
  replicas: 1
  selector:
    matchLabels:
      app: mysql
  template:
    metadata:
      labels:
        app: mysql
    spec:
      containers:
        - name: mysql
          image: mysql:8.0
          ports:
            - containerPort: 3306
          env:
            - name: MYSQL_ROOT_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: app-secrets
                  key: MYSQL_ROOT_PASSWORD
            - name: MYSQL_DATABASE
              valueFrom:
                configMapKeyRef:
                  name: app-config
                  key: MYSQL_DATABASE
            - name: MYSQL_USER
              valueFrom:
                secretKeyRef:
                  name: app-secrets
                  key: MYSQL_USER
            - name: MYSQL_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: app-secrets
                  key: MYSQL_PASSWORD
          args:
            - "--default-authentication-plugin=mysql_native_password"
          livenessProbe:
            exec:
              command:
                - mysqladmin
                - ping
                - -h
                - localhost
                - -u
                - root
                - -prootpassword
            initialDelaySeconds: 60
            periodSeconds: 10
            timeoutSeconds: 5
          readinessProbe:
            exec:
              command:
                - mysqladmin
                - ping
                - -h
                - localhost
                - -u
                - root
                - -prootpassword
            initialDelaySeconds: 30
            periodSeconds: 5
            timeoutSeconds: 5
---
apiVersion: v1
kind: Service
metadata:
  name: mysql-service
  namespace: microservices
spec:
  selector:
    app: mysql
  ports:
    - port: 3306
      targetPort: 3306
      nodePort: 30306
  type: NodePort
---
# MongoDB Customer Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mongodb
  namespace: microservices
spec:
  replicas: 1
  selector:
    matchLabels:
      app: mongodb
  template:
    metadata:
      labels:
        app: mongodb
    spec:
      containers:
        - name: mongodb
          image: mongo:latest
          ports:
            - containerPort: 27017
---
apiVersion: v1
kind: Service
metadata:
  name: mongodb-service
  namespace: microservices
spec:
  selector:
    app: mongodb
  ports:
    - port: 27017
      targetPort: 27017
      nodePort: 30017
  type: NodePort
---
# MongoDB Auth Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mongodb-auth
  namespace: microservices
spec:
  replicas: 1
  selector:
    matchLabels:
      app: mongodb-auth
  template:
    metadata:
      labels:
        app: mongodb-auth
    spec:
      containers:
        - name: mongodb-auth
          image: mongo:latest
          ports:
            - containerPort: 27017
---
apiVersion: v1
kind: Service
metadata:
  name: mongodb-auth-service
  namespace: microservices
spec:
  selector:
    app: mongodb-auth
  ports:
    - port: 27017
      targetPort: 27017
      nodePort: 30018
  type: NodePort
---
# RabbitMQ Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: rabbitmq
  namespace: microservices
spec:
  replicas: 1
  selector:
    matchLabels:
      app: rabbitmq
  template:
    metadata:
      labels:
        app: rabbitmq
    spec:
      containers:
        - name: rabbitmq
          image: rabbitmq:3-management
          ports:
            - containerPort: 5672
            - containerPort: 15672
          env:
            - name: RABBITMQ_DEFAULT_USER
              value: "admin"
            - name: RABBITMQ_DEFAULT_PASS
              value: "admin"
          livenessProbe:
            exec:
              command: ["rabbitmqctl", "status"]
            initialDelaySeconds: 60
            periodSeconds: 30
            timeoutSeconds: 10
          readinessProbe:
            exec:
              command: ["rabbitmqctl", "status"]
            initialDelaySeconds: 30
            periodSeconds: 10
---
apiVersion: v1
kind: Service
metadata:
  name: rabbitmq-service
  namespace: microservices
spec:
  selector:
    app: rabbitmq
  ports:
    - name: amqp
      port: 5672
      targetPort: 5672
      nodePort: 30672
    - name: management
      port: 15672
      targetPort: 15672
      nodePort: 31567
  type: NodePort
---
# Auth Service Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: auth-service
  namespace: microservices
spec:
  replicas: 1
  selector:
    matchLabels:
      app: auth-service
  template:
    metadata:
      labels:
        app: auth-service
    spec:
      containers:
        - name: auth-service
          image: danieljappe1/auth-service:v1.0
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 3000
          envFrom:
            - configMapRef:
                name: app-config
          env:
            - name: DATABASE_URL
              value: "$(MONGODB_URL_AUTH)/$(AUTH_DB)"
            - name: JWT_SECRET
              valueFrom:
                secretKeyRef:
                  name: app-secrets
                  key: JWT_SECRET
            - name: JWT_EXPIRES_IN
              valueFrom:
                secretKeyRef:
                  name: app-secrets
                  key: JWT_EXPIRES_IN
---
apiVersion: v1
kind: Service
metadata:
  name: auth-service
  namespace: microservices
spec:
  selector:
    app: auth-service
  ports:
    - port: 3000
      targetPort: 3000
      nodePort: 30000
  type: NodePort
---
# Admin Backend Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: admin-backend
  namespace: microservices
spec:
  replicas: 1
  selector:
    matchLabels:
      app: admin-backend
  template:
    metadata:
      labels:
        app: admin-backend
    spec:
      containers:
        - name: admin-backend
          image: danieljappe1/admin-backend:v1.0
          imagePullPolicy: IfNotPresent
          command: [ "/bin/sh" ]
          args: [ "-c", "sleep 30 && node server.js" ]  # Give databases time to start
          ports:
            - containerPort: 3001
          envFrom:
            - configMapRef:
                name: app-config
          env:
            - name: DB_USER
              valueFrom:
                secretKeyRef:
                  name: app-secrets
                  key: MYSQL_USER
            - name: DB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: app-secrets
                  key: MYSQL_PASSWORD
            - name: DB_NAME
              valueFrom:
                configMapKeyRef:
                  name: app-config
                  key: MYSQL_DATABASE
            # Override for any hardcoded mysql hostname
            - name: MYSQL_HOST
              value: "mysql-service"
            # Override for any hardcoded mysql hostname
            - name: MYSQL_HOST
              value: "mysql-service"
---
apiVersion: v1
kind: Service
metadata:
  name: admin-backend-service
  namespace: microservices
spec:
  selector:
    app: admin-backend
  ports:
    - port: 3001
      targetPort: 3001
      nodePort: 30001
  type: NodePort
---
# Admin Outbox Publisher Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: admin-outbox-publisher
  namespace: microservices
spec:
  replicas: 1
  selector:
    matchLabels:
      app: admin-outbox-publisher
  template:
    metadata:
      labels:
        app: admin-outbox-publisher
    spec:
      containers:
        - name: admin-outbox-publisher
          image: danieljappe1/admin-backend:v1.0
          imagePullPolicy: IfNotPresent
          command: ["sh", "-c", "wait-for-it.sh mysql-service 3306 -- node jobs/EventOutboxPublisher.js"]
          envFrom:
            - configMapRef:
                name: app-config
          env:
            - name: DB_USER
              valueFrom:
                secretKeyRef:
                  name: app-secrets
                  key: MYSQL_USER
            - name: DB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: app-secrets
                  key: MYSQL_PASSWORD
            - name: DB_NAME
              valueFrom:
                configMapKeyRef:
                  name: app-config
                  key: MYSQL_DATABASE
---
# Customer Backend Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: customer-backend
  namespace: microservices
spec:
  replicas: 1
  selector:
    matchLabels:
      app: customer-backend
  template:
    metadata:
      labels:
        app: customer-backend
    spec:
      containers:
        - name: customer-backend
          image: danieljappe1/customer-backend:v1.0
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 3002
          envFrom:
            - configMapRef:
                name: app-config
          env:
            - name: DATABASE_URL
              value: "$(MONGODB_URL_CUSTOMER)/$(CUSTOMER_DB)"
---
apiVersion: v1
kind: Service
metadata:
  name: customer-backend-service
  namespace: microservices
spec:
  selector:
    app: customer-backend
  ports:
    - port: 3002
      targetPort: 3002
      nodePort: 30002
  type: NodePort
---
# Customer Frontend Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: customer-frontend
  namespace: microservices
spec:
  replicas: 1
  selector:
    matchLabels:
      app: customer-frontend
  template:
    metadata:
      labels:
        app: customer-frontend
    spec:
      containers:
        - name: customer-frontend
          image: danieljappe1/customer-frontend:v1.0
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 80
          envFrom:
            - configMapRef:
                name: app-config
---
apiVersion: v1
kind: Service
metadata:
  name: customer-frontend-service
  namespace: microservices
spec:
  selector:
    app: customer-frontend
  ports:
    - port: 8080
      targetPort: 80
      nodePort: 30080
  type: NodePort
---
# Admin Frontend Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: admin-frontend
  namespace: microservices
spec:
  replicas: 1
  selector:
    matchLabels:
      app: admin-frontend
  template:
    metadata:
      labels:
        app: admin-frontend
    spec:
      containers:
        - name: admin-frontend
          image: danieljappe1/admin-frontend:v1.0
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 81
          envFrom:
            - configMapRef:
                name: app-config
---
apiVersion: v1
kind: Service
metadata:
  name: admin-frontend-service
  namespace: microservices
spec:
  selector:
    app: admin-frontend
  ports:
    - port: 8081
      targetPort: 81
      nodePort: 30081
  type: NodePort
---
# Mail Service Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mail-service
  namespace: microservices
spec:
  replicas: 1
  selector:
    matchLabels:
      app: mail-service
  template:
    metadata:
      labels:
        app: mail-service
    spec:
      containers:
        - name: mail-service
          image: danieljappe1/mail-service:v1.0
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 3003
          envFrom:
            - configMapRef:
                name: app-config
          env:
            - name: MAIL_HOST
              valueFrom:
                secretKeyRef:
                  name: app-secrets
                  key: MAIL_HOST
            - name: MAIL_USERNAME
              valueFrom:
                secretKeyRef:
                  name: app-secrets
                  key: MAIL_USERNAME
            - name: MAIL_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: app-secrets
                  key: MAIL_PASSWORD
---
apiVersion: v1
kind: Service
metadata:
  name: mail-service
  namespace: microservices
spec:
  selector:
    app: mail-service
  ports:
    - port: 3003
      targetPort: 3003
      nodePort: 30003
  type: NodePort
---
# Admin Sync Service Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: admin-sync-service
  namespace: microservices
spec:
  replicas: 1
  selector:
    matchLabels:
      app: admin-sync-service
  template:
    metadata:
      labels:
        app: admin-sync-service
    spec:
      containers:
        - name: admin-sync-service
          image: danieljappe1/admin-sync-service:v1.0
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 3004
          envFrom:
            - configMapRef:
                name: app-config
          env:
            - name: MYSQL_HOST
              value: "mysql-service"
            - name: MYSQL_PORT
              valueFrom:
                configMapKeyRef:
                  name: app-config
                  key: DB_PORT
            - name: MYSQL_USER
              valueFrom:
                secretKeyRef:
                  name: app-secrets
                  key: MYSQL_USER
            - name: MYSQL_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: app-secrets
                  key: MYSQL_PASSWORD
            - name: MONGODB_URL
              value: "$(MONGODB_URL_CUSTOMER)/$(CUSTOMER_DB)"
---
# Customer Sync Service Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: customer-sync-service
  namespace: microservices
spec:
  replicas: 1
  selector:
    matchLabels:
      app: customer-sync-service
  template:
    metadata:
      labels:
        app: customer-sync-service
    spec:
      containers:
        - name: customer-sync-service
          image: danieljappe1/customer-sync-service:v1.0
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 3005
          envFrom:
            - configMapRef:
                name: app-config
          env:
            - name: DATABASE_URL
              value: "$(MONGODB_URL_CUSTOMER)/$(CUSTOMER_DB)"